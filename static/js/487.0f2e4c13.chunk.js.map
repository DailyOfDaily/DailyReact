{"version":3,"file":"static/js/487.0f2e4c13.chunk.js","mappings":"4JAGA,MAmGA,EAnGoCA,KAClC,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACX,KAAEC,GAASF,EAASG,OAAS,CAAC,GAE7BC,EAAQC,IAAaC,EAAAA,EAAAA,UAA0C,YAC/DC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,2DAChCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAwB,OACnDK,EAAcC,IAAmBN,EAAAA,EAAAA,UAAwB,OACzDO,EAAYC,IAAiBR,EAAAA,EAAAA,WAAS,IACtCS,EAAgBC,IAAqBV,EAAAA,EAAAA,UAAS,IAwDrD,OACEW,EAAAA,EAAAA,KAAA,OACEC,UAAU,8BACVC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UACZC,UAEFC,EAAAA,EAAAA,MAAA,OACEN,UAAU,sBACVO,QAAoB,YAAXrB,EAlDKsB,KAClB,IAAIb,EAEJ,GAAe,YAAXT,EAAsB,CACxB,MAAMuB,EAAUC,KAAKC,MACrBjB,EAAgBe,GAAWlB,GAAa,IACxCJ,EAAU,WACVG,EAAW,6CACb,MACEA,EAAW,+HACXH,EAAU,WACVS,GAAc,GACdgB,YAAW,KACThB,GAAc,GACVC,IACFP,EAAW,iFACXQ,EAAkB,IACpB,GACC,IACL,EAlCgBe,KACD,YAAX3B,IACJC,EAAU,SACVG,EAAW,6CACXsB,YAAW,KACTzB,EAAU,WACVK,EAAakB,KAAKC,OACdhB,EACFG,EAAkB,6FAElBR,EAAW,0DACb,GACiB,IAAhBwB,KAAKC,SAAiB,MAAK,EAsD1Bd,MAAO,IAtBI,YAAXf,EACK,CAAE8B,gBAAiB,QAASC,MAAO,SACtB,UAAX/B,EACF,CAAE8B,gBAAiB,QAASC,MAAO,SACtB,YAAX/B,EACF,CAAE8B,gBAAiB,SAAUC,MAAO,OAEtC,CAAC,EAiBFC,QAAS,OACTC,MAAO,QACPC,OAAQ,QACRC,UAAW,SACXC,SAAU,OACVC,OAAQ,kBACRC,OAAQ7B,EAAa,cAAgB,UACrC8B,cAAe9B,EAAa,OAAS,QACrCU,SAAA,CAEkB,kBAAZhB,GAxCSqC,EAwC4BrC,EAvC1CqC,EAAIC,MAAM,MAAMC,KAAI,CAACC,EAAMC,KAAUxB,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAmBwB,GAAK9B,EAAAA,EAAAA,KAAA,WAAb+B,OAuCK/B,EAAAA,EAAAA,KAAA,KAAAM,SAAIhB,IAC3DI,IAAgBa,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,6DAAcZ,EAAa,aAzC9BiC,KA6Cf,C","sources":["components/ReactionSpeedTest.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\n\r\nconst ReactionSpeedTest: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>(); // URL 파라미터에서 id를 추출\r\n  const location = useLocation();\r\n  const { game } = location.state || {}; // Link에서 전달한 상태 데이터\r\n\r\n  const [status, setStatus] = useState<'waiting' | 'ready' | 'clicked'>('waiting');\r\n  const [message, setMessage] = useState('\\n누르면 시작합니다!\\n');\r\n  const [startTime, setStartTime] = useState<number | null>(null);\r\n  const [reactionTime, setReactionTime] = useState<number | null>(null);\r\n  const [isDisabled, setIsDisabled] = useState(false); // 클릭 비활성화 상태 추가\r\n  const [delayedMessage, setDelayedMessage] = useState(''); // 비활성화된 상태에서의 메시지 관리\r\n\r\n  const startTest = () => {\r\n    if (status !== 'waiting') return;  // 이미 게임이 진행 중이라면 시작하지 않음\r\n    setStatus('ready');\r\n    setMessage('\\n준비해 주세요\\n');\r\n    setTimeout(() => {\r\n      setStatus('clicked');\r\n      setStartTime(Date.now());\r\n      if (isDisabled) {\r\n        setDelayedMessage('지금 당장 누르세요(비활성화 상태)');\r\n      } else {\r\n        setMessage('\\n지금 당장 누르세요.\\n');\r\n      }\r\n    }, Math.random() * 500 + 2500);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (isDisabled) return; // 비활성화 상태면 클릭을 무시\r\n\r\n    if (status === 'clicked') {\r\n      const endTime = Date.now();\r\n      setReactionTime(endTime - (startTime || 0));\r\n      setStatus('waiting');\r\n      setMessage('\\n누르면 재시작!\\n');\r\n    } else {\r\n      setMessage('\\n아직 누르면 안 됩니다!\\n2초 후 클릭 가능합니다.\\n');\r\n      setStatus('waiting');\r\n      setIsDisabled(true); // 클릭을 1초 동안 비활성화\r\n      setTimeout(() => {\r\n        setIsDisabled(false); // 1초 후 다시 활성화\r\n        if (delayedMessage) {\r\n          setMessage('[비활성화 상태] 기다려주세요.');\r\n          setDelayedMessage(''); // 지연된 메시지 초기화\r\n        }\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  // 메시지에서 \\n을 <br />로 바꾸기\r\n  const formatMessage = (msg: string) => {\r\n    return msg.split('\\n').map((line, index) => <span key={index}>{line}<br /></span>);\r\n  };\r\n\r\n  // 상태에 따라 스타일 변경\r\n  const getStyle = () => {\r\n    if (status === 'waiting') {\r\n      return { backgroundColor: 'white', color: 'black' };\r\n    } else if (status === 'ready') {\r\n      return { backgroundColor: 'black', color: 'white' };\r\n    } else if (status === 'clicked') {\r\n      return { backgroundColor: 'yellow', color: 'red' };\r\n    }\r\n    return {};\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"reaction-speed-test-wrapper\"\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <div\r\n        className=\"reaction-speed-test\"\r\n        onClick={status !== 'waiting' ? handleClick : startTest}\r\n        style={{\r\n          ...getStyle(),\r\n          padding: '20px',\r\n          width: '500px',\r\n          height: '500px',\r\n          textAlign: 'center',\r\n          fontSize: '30px',\r\n          border: '1px solid black',\r\n          cursor: isDisabled ? 'not-allowed' : 'pointer', // 비활성화 상태일 때 커서 모양 변경\r\n          pointerEvents: isDisabled ? 'none' : 'auto', // 클릭 방지\r\n        }}\r\n      >\r\n        {typeof message === 'string' ? formatMessage(message) : <p>{message}</p>}\r\n        {reactionTime && <p>누르기까지 걸린 시간: {reactionTime}ms</p>}\r\n        {/* <p>{delayedMessage || message}</p>\r\n        {reactionTime && <p>Reaction time: {reactionTime}ms</p>} */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactionSpeedTest;\r\n"],"names":["ReactionSpeedTest","id","useParams","location","useLocation","game","state","status","setStatus","useState","message","setMessage","startTime","setStartTime","reactionTime","setReactionTime","isDisabled","setIsDisabled","delayedMessage","setDelayedMessage","_jsx","className","style","display","justifyContent","alignItems","children","_jsxs","onClick","handleClick","endTime","Date","now","setTimeout","startTest","Math","random","backgroundColor","color","padding","width","height","textAlign","fontSize","border","cursor","pointerEvents","msg","split","map","line","index"],"sourceRoot":""}
{"version":3,"file":"static/js/713.bdc6cb05.chunk.js","mappings":"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","sources":["components/PongGame.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\n\r\nconst PongGame: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const location = useLocation();\r\n  const { game } = location.state || {};\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [leftScore, setLeftScore] = useState(0);\r\n  const [rightScore, setRightScore] = useState(0);\r\n  const [isGameRunning, setIsGameRunning] = useState(false); // Game state toggle\r\n\r\n  const upPressedLeft = useRef(false);\r\n  const downPressedLeft = useRef(false);\r\n  const upPressedRight = useRef(false);\r\n  const downPressedRight = useRef(false);\r\n\r\n  const ballSpeed = useRef(3);\r\n  const ballVelocityX = useRef(3);\r\n  const ballVelocityY = useRef(3);\r\n  const lastSpeedUpdateTime = useRef(Date.now());\r\n\r\n  const animationFrameId = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (canvas) {\r\n      const context = canvas.getContext(\"2d\");\r\n      if (context) {\r\n        const paddleWidth = 10,\r\n          paddleHeight = 100,\r\n          ballSize = 15;\r\n        let leftPaddleY = canvas.height / 2 - paddleHeight / 2;\r\n        let rightPaddleY = canvas.height / 2 - paddleHeight / 2;\r\n        let ballX = canvas.width / 2,\r\n          ballY = canvas.height / 2;\r\n\r\n        const paddleSpeed = 4;\r\n\r\n        const resetBall = () => {\r\n          ballX = canvas.width / 2;\r\n          ballY = canvas.height / 2;\r\n          ballSpeed.current = 5;\r\n          ballVelocityX.current = ballSpeed.current;\r\n          ballVelocityY.current = ballSpeed.current;\r\n          const randomYDirection = Math.random() > 0.5 ? 1 : -1;\r\n          ballVelocityX.current = -ballSpeed.current;\r\n          ballVelocityY.current = randomYDirection * ballSpeed.current;\r\n        };\r\n\r\n        const render = () => {\r\n          if (!isGameRunning) {\r\n            animationFrameId.current = requestAnimationFrame(render);\r\n            return;\r\n          }\r\n\r\n          context.clearRect(0, 0, canvas.width, canvas.height);\r\n          ballX += ballVelocityX.current;\r\n          ballY += ballVelocityY.current;\r\n\r\n          if (ballY + ballSize >= canvas.height || ballY - ballSize <= 0) {\r\n            ballVelocityY.current = -ballVelocityY.current;\r\n          }\r\n\r\n          if (\r\n            ballX - ballSize <= paddleWidth &&\r\n            ballY > leftPaddleY &&\r\n            ballY < leftPaddleY + paddleHeight\r\n          ) {\r\n            const deltaY = ballY - (leftPaddleY + paddleHeight / 2);\r\n            ballVelocityY.current = deltaY * 0.3;\r\n            ballVelocityX.current = -ballVelocityX.current;\r\n          }\r\n\r\n          if (\r\n            ballX + ballSize >= canvas.width - paddleWidth &&\r\n            ballY > rightPaddleY &&\r\n            ballY < rightPaddleY + paddleHeight\r\n          ) {\r\n            ballVelocityX.current = -ballVelocityX.current;\r\n          }\r\n\r\n          if (ballX - ballSize <= 0) {\r\n            setRightScore((prev) => prev + 1);\r\n            resetBall();\r\n          } else if (ballX + ballSize >= canvas.width) {\r\n            setLeftScore((prev) => prev + 1);\r\n            resetBall();\r\n          }\r\n\r\n          if (upPressedLeft.current && leftPaddleY > 0) leftPaddleY -= paddleSpeed;\r\n          if (\r\n            downPressedLeft.current &&\r\n            leftPaddleY < canvas.height - paddleHeight\r\n          )\r\n            leftPaddleY += paddleSpeed;\r\n\r\n          if (upPressedRight.current && rightPaddleY > 0) rightPaddleY -= paddleSpeed;\r\n          if (\r\n            downPressedRight.current &&\r\n            rightPaddleY < canvas.height - paddleHeight\r\n          )\r\n            rightPaddleY += paddleSpeed;\r\n\r\n          context.fillStyle = \"white\";\r\n          context.fillRect(0, leftPaddleY, paddleWidth, paddleHeight);\r\n          context.fillRect(\r\n            canvas.width - paddleWidth,\r\n            rightPaddleY,\r\n            paddleWidth,\r\n            paddleHeight\r\n          );\r\n          context.beginPath();\r\n          context.arc(ballX, ballY, ballSize, 0, Math.PI * 2);\r\n          context.fill();\r\n\r\n          context.font = \"20px Arial\";\r\n          context.fillText(`Left: ${leftScore}`, 50, 30);\r\n          context.fillText(`Right: ${rightScore}`, canvas.width - 120, 30);\r\n\r\n          animationFrameId.current = requestAnimationFrame(render);\r\n        };\r\n\r\n        const updateSpeed = () => {\r\n          const now = Date.now();\r\n          if (now - lastSpeedUpdateTime.current >= 2000) {\r\n            lastSpeedUpdateTime.current = now;\r\n            ballSpeed.current *= 1.1;\r\n            ballVelocityX.current = ballSpeed.current * Math.sign(ballVelocityX.current);\r\n            ballVelocityY.current = ballSpeed.current * Math.sign(ballVelocityY.current);\r\n          }\r\n        };\r\n\r\n        const handleKeyDown = (e: KeyboardEvent) => {\r\n          if (e.key === \"q\" || e.key === \"Q\") upPressedLeft.current = true;\r\n          if (e.key === \"a\" || e.key === \"A\") downPressedLeft.current = true;\r\n          if (e.key === \"p\" || e.key === \"P\") upPressedRight.current = true;\r\n          if (e.key === \"l\" || e.key === \"L\") downPressedRight.current = true;\r\n          if (e.key === \" \") setIsGameRunning((prev) => !prev); // Spacebar toggles game state\r\n        };\r\n\r\n        const handleKeyUp = (e: KeyboardEvent) => {\r\n          if (e.key === \"q\" || e.key === \"Q\") upPressedLeft.current = false;\r\n          if (e.key === \"a\" || e.key === \"A\") downPressedLeft.current = false;\r\n          if (e.key === \"p\" || e.key === \"P\") upPressedRight.current = false;\r\n          if (e.key === \"l\" || e.key === \"L\") downPressedRight.current = false;\r\n        };\r\n\r\n        window.addEventListener(\"keydown\", handleKeyDown);\r\n        window.addEventListener(\"keyup\", handleKeyUp);\r\n\r\n        resetBall();\r\n        animationFrameId.current = requestAnimationFrame(render);\r\n\r\n        const speedInterval = setInterval(updateSpeed, 100);\r\n\r\n        return () => {\r\n          window.removeEventListener(\"keydown\", handleKeyDown);\r\n          window.removeEventListener(\"keyup\", handleKeyUp);\r\n          if (animationFrameId.current) {\r\n            cancelAnimationFrame(animationFrameId.current);\r\n          }\r\n          clearInterval(speedInterval);\r\n        };\r\n      }\r\n    }\r\n  }, [leftScore, rightScore, isGameRunning]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={800}\r\n        height={400}\r\n        style={{ display: \"block\", margin: \"0 auto\", background: \"black\" }}\r\n      ></canvas>\r\n      <p style={{ textAlign: \"center\", color: \"black\" }}>\r\n        왼쪽: {leftScore} - 오른쪽: {rightScore}\r\n        <br />\r\n        게임조작 : 왼쪽 Q A  -  오른쪽 P L <br />\r\n        스페이스바: 게임 시작/정지\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PongGame;\r\n"],"names":["PongGame","id","useParams","location","useLocation","game","state","canvasRef","useRef","leftScore","setLeftScore","useState","rightScore","setRightScore","isGameRunning","setIsGameRunning","upPressedLeft","downPressedLeft","upPressedRight","downPressedRight","ballSpeed","ballVelocityX","ballVelocityY","lastSpeedUpdateTime","Date","now","animationFrameId","useEffect","canvas","current","context","getContext","paddleWidth","paddleHeight","ballSize","leftPaddleY","height","rightPaddleY","ballX","width","ballY","paddleSpeed","resetBall","randomYDirection","Math","random","render","clearRect","deltaY","prev","fillStyle","fillRect","beginPath","arc","PI","fill","font","fillText","requestAnimationFrame","updateSpeed","sign","handleKeyDown","e","key","handleKeyUp","window","addEventListener","speedInterval","setInterval","removeEventListener","cancelAnimationFrame","clearInterval","_jsxs","children","_jsx","ref","style","display","margin","background","textAlign","color"],"sourceRoot":""}
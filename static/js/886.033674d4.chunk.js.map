{"version":3,"file":"static/js/886.033674d4.chunk.js","mappings":"4JAIA,MAsGA,EAtGgCA,KAC9B,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACX,KAAEC,GAASF,EAASG,OAAS,CAAC,GAE7BC,EAAOC,IAAYC,EAAAA,EAAAA,UAASC,MAAM,GAAGC,KAAK,QAC1CC,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAQC,IAAaN,EAAAA,EAAAA,UAAwB,OAC7CO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAS,CAAES,EAAG,EAAGC,EAAG,IAwDtD,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAKpCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,MAAIN,EAAUE,GAAEK,EAAAA,EAAAA,KAAA,SAAS,MAAIP,EAAUG,QAI5CI,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SACzBf,EAAMiB,KAAI,CAACC,EAAOC,KACjBH,EAAAA,EAAAA,KAAA,OAEEF,UAAU,mBACVM,QAASA,IAjDED,KACnB,GAAInB,EAAMmB,IAAUZ,EAAQ,OAE5B,MAAMc,EAAW,IAAIrB,GACfsB,EAAgBjB,EAAU,IAAM,IAEtCgB,EAASF,GAASG,EAClBrB,EAASoB,GAGTX,GAAaa,IAAI,IACZA,EACH,CAACD,GAAgBC,EAAKD,GAAiB,MAGzC,MAAME,EAnCaxB,KACnB,MAAMyB,EAAsB,CAC1B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,IAAK,MAAOC,EAAGC,EAAGC,KAAMH,EACtB,GAAIzB,EAAM0B,IAAM1B,EAAM0B,KAAO1B,EAAM2B,IAAM3B,EAAM0B,KAAO1B,EAAM4B,GAC1D,OAAO5B,EAAM0B,GAGjB,OAAO,IAAI,EAmBQG,CAAYR,GAC3BG,EACFhB,EAAUgB,GACDH,EAASS,OAAMC,GAAQA,IAChCvB,EAAU,QAEVF,GAAYD,EACd,EA2BuB2B,CAAYb,GAAOJ,SAEjCG,GAJIC,OAUVZ,IACCS,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SACjB,SAAXR,EAAoB,sBAAS,GAAGA,qBAKrCS,EAAAA,EAAAA,KAAA,UAAQF,UAAU,eAAeM,QAtCnBa,KAChBhC,EAASE,MAAM,GAAGC,KAAK,OACvBE,GAAW,GACXE,EAAU,MACVE,EAAa,CAAEC,EAAG,EAAGC,EAAG,GAAI,EAkC0BG,SAAC,yBAGjD,C","sources":["components/TicTacToeGame.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport './TicTacToeGame.css'; // CSS 파일 추가\r\n\r\nconst TicTacToeGame: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const location = useLocation();\r\n  const { game } = location.state || {};\r\n\r\n  const [board, setBoard] = useState(Array(9).fill(null)); // 게임판 상태\r\n  const [isXNext, setIsXNext] = useState(true); // 현재 플레이어\r\n  const [winner, setWinner] = useState<string | null>(null); // 승리자\r\n  const [turnCount, setTurnCount] = useState({ X: 0, O: 0 }); // 턴 카운트\r\n\r\n  // 승리 조건 체크 함수\r\n  const checkWinner = (board: string[]) => {\r\n    const winningCombinations = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (const [a, b, c] of winningCombinations) {\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // 클릭 이벤트 핸들러\r\n  const handleClick = (index: number) => {\r\n    if (board[index] || winner) return;\r\n\r\n    const newBoard = [...board];\r\n    const currentPlayer = isXNext ? 'X' : 'O';\r\n\r\n    newBoard[index] = currentPlayer;\r\n    setBoard(newBoard);\r\n\r\n    // 턴 카운트 업데이트\r\n    setTurnCount(prev => ({\r\n      ...prev,\r\n      [currentPlayer]: prev[currentPlayer] + 1,\r\n    }));\r\n\r\n    const gameWinner = checkWinner(newBoard);\r\n    if (gameWinner) {\r\n      setWinner(gameWinner);\r\n    } else if (newBoard.every(cell => cell)) {\r\n      setWinner('Draw');\r\n    } else {\r\n      setIsXNext(!isXNext);\r\n    }\r\n  };\r\n\r\n  // 다시 시작 버튼\r\n  const resetGame = () => {\r\n    setBoard(Array(9).fill(null));\r\n    setIsXNext(true);\r\n    setWinner(null);\r\n    setTurnCount({ X: 0, O: 0 }); // 턴 카운트 초기화\r\n  };\r\n\r\n  return (\r\n    <div className=\"tic-tac-toe-container\">\r\n      {/* <h1>Tic Tac Toe - Game ID: {id}</h1>\r\n      {game && <p>Game Name: {game.name}</p>} */}\r\n\r\n      {/* 턴 카운트 표시 */}\r\n      <div className=\"turn-counter\">\r\n        <p>X: {turnCount.X}<br></br>O: {turnCount.O}</p>\r\n      </div>\r\n\r\n      {/* 게임판 */}\r\n      <div className=\"tic-tac-toe\">\r\n        {board.map((value, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"tic-tac-toe-cell\"\r\n            onClick={() => handleClick(index)}\r\n          >\r\n            {value}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* 승리 메시지 */}\r\n      {winner && (\r\n        <div className=\"winner-message\">\r\n          {winner === 'Draw' ? '무승부!' : `${winner} 승리!`}\r\n        </div>\r\n      )}\r\n\r\n      {/* 재시작 버튼 */}\r\n      <button className=\"reset-button\" onClick={resetGame}>\r\n        재시작\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicTacToeGame;\r\n"],"names":["TicTacToeGame","id","useParams","location","useLocation","game","state","board","setBoard","useState","Array","fill","isXNext","setIsXNext","winner","setWinner","turnCount","setTurnCount","X","O","_jsxs","className","children","_jsx","map","value","index","onClick","newBoard","currentPlayer","prev","gameWinner","winningCombinations","a","b","c","checkWinner","every","cell","handleClick","resetGame"],"sourceRoot":""}
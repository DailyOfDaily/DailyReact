{"version":3,"file":"static/js/511.e0d9a297.chunk.js","mappings":"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","sources":["components/MemoryMatchGame.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\n\r\n\r\nconst MemoryMatchGame: React.FC = () => {\r\n  const imagePaths = Array.from({ length: 8 }, (_, i) => `https://dailyofdaily.github.io/DailyReact/DailyReact/images/MMG_${i + 1}.jpg`);\r\n\r\n  const generateShuffledCards = () => {\r\n    const cards = imagePaths\r\n      .flatMap((path, index) => [\r\n        { id: `card${index}a`, image: path, flipped: false },\r\n        { id: `card${index}b`, image: path, flipped: false },\r\n      ])\r\n      .sort(() => Math.random() - 0.5); // 무작위 셔플\r\n    return cards;\r\n  };\r\n\r\n  const [cards, setCards] = useState(generateShuffledCards());\r\n  const [flipped, setFlipped] = useState<number[]>([]);\r\n  const [time, setTime] = useState(0); // 경과 시간 (밀리초 단위)\r\n  const [timerRunning, setTimerRunning] = useState(false); // 타이머 동작 여부\r\n\r\n  useEffect(() => {\r\n    let timer: NodeJS.Timeout | null = null;\r\n\r\n    if (timerRunning) {\r\n      timer = setInterval(() => {\r\n        setTime(prevTime => prevTime + 10); // 10ms 간격으로 증가\r\n      }, 10);\r\n    } else if (!timerRunning && timer) {\r\n      clearInterval(timer);\r\n    }\r\n\r\n    return () => {\r\n      if (timer) clearInterval(timer);\r\n    };\r\n  }, [timerRunning]);\r\n\r\n  const flipCard = (index: number) => {\r\n    if (flipped.length === 2 || flipped.includes(index) || cards[index].flipped) {\r\n      return;\r\n    }\r\n\r\n    if (!timerRunning) {\r\n      setTimerRunning(true); // 첫 카드 클릭 시 타이머 시작\r\n    }\r\n\r\n    const newFlipped = [...flipped, index];\r\n    setFlipped(newFlipped);\r\n\r\n    if (newFlipped.length === 2) {\r\n      setTimeout(() => {\r\n        const [firstIndex, secondIndex] = newFlipped;\r\n        if (cards[firstIndex].image === cards[secondIndex].image) {\r\n          // 매칭 성공\r\n          setCards(prevCards =>\r\n            prevCards.map((card, idx) =>\r\n              idx === firstIndex || idx === secondIndex\r\n                ? { ...card, flipped: true }\r\n                : card\r\n            )\r\n          );\r\n        }\r\n        setFlipped([]);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 모든 카드가 뒤집혔는지 확인\r\n    if (cards.every(card => card.flipped)) {\r\n      setTimerRunning(false); // 타이머 중지\r\n    }\r\n  }, [cards]);\r\n\r\n  const resetGame = () => {\r\n    setCards(generateShuffledCards());\r\n    setFlipped([]);\r\n    setTime(0);\r\n    setTimerRunning(false);\r\n  };\r\n\r\n  const formatTime = (ms: number) => {\r\n    const seconds = Math.floor(ms / 1000);\r\n    const milliseconds = ms % 1000;\r\n    return `${seconds}.${milliseconds.toString().padStart(3, \"0\")}초`;\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", margin: \"20px\" }}>\r\n      {/* 상단 UI */}\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <span style={{ fontSize: \"24px\", fontWeight: \"bold\", marginRight: \"20px\" }}>\r\n          시간: {formatTime(time)}\r\n        </span>\r\n        <button\r\n          onClick={resetGame}\r\n          style={{\r\n            padding: \"10px 20px\",\r\n            fontSize: \"16px\",\r\n            cursor: \"pointer\",\r\n            backgroundColor: \"#f44336\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            borderRadius: \"5px\",\r\n          }}\r\n        >\r\n          재시작\r\n        </button>\r\n      </div>\r\n\r\n      {/* 카드 그리드 */}\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(4, 150px)\",\r\n          gridGap: \"10px\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          margin: \"20px\",\r\n        }}\r\n      >\r\n        {cards.map((card, index) => (\r\n          <div\r\n            key={card.id}\r\n            onClick={() => flipCard(index)}\r\n            style={{\r\n              width: \"150px\",\r\n              height: \"150px\",\r\n              backgroundColor: flipped.includes(index) || card.flipped ? \"#eee\" : \"#333\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              cursor: \"pointer\",\r\n              border: \"1px solid #aaa\",\r\n              overflow: \"hidden\",\r\n            }}\r\n          >\r\n            {flipped.includes(index) || card.flipped ? (\r\n              <img\r\n                src={card.image}\r\n                alt={`Card ${index}`}\r\n                style={{\r\n                  width: \"100%\",\r\n                  height: \"100%\",\r\n                  objectFit: \"cover\",\r\n                }}\r\n              />\r\n            ) : (\r\n              \"?\"\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemoryMatchGame;"],"names":["MemoryMatchGame","imagePaths","Array","from","length","_","i","generateShuffledCards","flatMap","path","index","id","image","flipped","sort","Math","random","cards","setCards","useState","setFlipped","time","setTime","timerRunning","setTimerRunning","useEffect","timer","setInterval","prevTime","clearInterval","every","card","_jsxs","style","textAlign","margin","children","marginBottom","fontSize","fontWeight","marginRight","ms","floor","toString","padStart","_jsx","onClick","resetGame","padding","cursor","backgroundColor","color","border","borderRadius","display","gridTemplateColumns","gridGap","justifyContent","alignItems","map","includes","newFlipped","setTimeout","firstIndex","secondIndex","prevCards","idx","flipCard","width","height","overflow","src","alt","objectFit"],"sourceRoot":""}